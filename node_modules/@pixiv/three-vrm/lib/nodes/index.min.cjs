/*! (c) 2019-2024 pixiv Inc. - https://github.com/pixiv/three-vrm/blob/release/LICENSE */
"use strict";var B=Object.create;var v=Object.defineProperty;var q=Object.getOwnPropertyDescriptor;var K=Object.getOwnPropertyNames;var j=Object.getPrototypeOf,Z=Object.prototype.hasOwnProperty;var $=(e,t)=>{for(var o in t)v(e,o,{get:t[o],enumerable:!0})},O=(e,t,o,r)=>{if(t&&typeof t=="object"||typeof t=="function")for(let l of K(t))!Z.call(e,l)&&l!==o&&v(e,l,{get:()=>t[l],enumerable:!(r=q(t,l))||r.enumerable});return e};var h=(e,t,o)=>(o=e!=null?B(j(e)):{},O(t||!e||!e.__esModule?v(o,"default",{value:e,enumerable:!0}):o,e)),G=e=>O(v({},"__esModule",{value:!0}),e);var Ce={};$(Ce,{MToonAnimatedUVNode:()=>D,MToonLightingModel:()=>z,MToonNodeMaterial:()=>ye});module.exports=G(Ce);var b=h(require("three"),1),s=h(require("three/webgpu"),1),a=h(require("three/webgpu"),1),n=h(require("three/webgpu"),1),m=h(require("three/webgpu"),1),p=h(require("three/webgpu"),1),i=h(require("three/webgpu"),1),E=h(require("three/webgpu"),1);var W=parseInt(b.REVISION,10);W<167&&console.warn(`MToonNodeMaterial requires Three.js r167 or higher (You are using r${W}). This would not work correctly.`);var J=a.materialReference("color","color"),Q=a.materialReference("map","texture"),ee=a.materialReference("normalMap","texture"),te=a.materialReference("normalScale","vec2"),ie=a.materialReference("emissive","color"),oe=a.materialReference("emissiveIntensity","float"),re=a.materialReference("emissiveMap","texture"),ae=a.materialReference("shadeColorFactor","color"),le=a.materialReference("shadingShiftFactor","float"),U=a.materialReference("shadeMultiplyTexture","texture"),ne=a.materialReference("shadeMultiplyTextureScale","float"),se=a.materialReference("shadingToonyFactor","float"),me=a.materialReference("rimLightingMixFactor","float"),ue=a.materialReference("rimMultiplyTexture","texture"),he=a.materialReference("matcapFactor","color"),de=a.materialReference("matcapTexture","texture"),ce=a.materialReference("parametricRimColorFactor","color"),pe=a.materialReference("parametricRimLiftFactor","float"),Ee=a.materialReference("parametricRimFresnelPowerFactor","float"),Re=a.materialReference("outlineWidthMultiplyTexture","texture"),fe=a.materialReference("outlineWidthFactor","float"),I=a.materialReference("outlineColorFactor","color"),Te=a.materialReference("outlineLightingMixFactor","float"),ve=a.materialReference("uvAnimationMaskTexture","texture"),Ne=a.materialReference("uvAnimationScrollXOffset","float"),ge=a.materialReference("uvAnimationScrollYOffset","float"),He=a.materialReference("uvAnimationRotationPhase","float"),D=class extends s.TempNode{constructor(e){super("vec2"),this.hasMaskTexture=e}setup(){let e=1;this.hasMaskTexture&&(e=s.vec4(ve).context({getUV:()=>s.uv()}).r);let t=s.uv(),o=He.mul(e),r=s.cos(o),l=s.sin(o);t=t.sub(s.vec2(.5,.5)),t=t.mul(s.mat2(r,l,l.negate(),r)),t=t.add(s.vec2(.5,.5));let u=s.vec2(Ne,ge).mul(e);return t=t.add(u),t.temp("AnimatedUV")}},k=m.nodeImmutable(m.PropertyNode,"vec3").temp("ShadeColor"),Y=m.nodeImmutable(m.PropertyNode,"float").temp("ShadingShift"),X=m.nodeImmutable(m.PropertyNode,"float").temp("ShadingToony"),g=m.nodeImmutable(m.PropertyNode,"float").temp("RimLightingMix"),H=m.nodeImmutable(m.PropertyNode,"vec3").temp("RimMultiply"),M=m.nodeImmutable(m.PropertyNode,"vec3").temp("matcap"),x=m.nodeImmutable(m.PropertyNode,"vec3").temp("ParametricRim"),N=e=>parseInt(p.REVISION,10)>=168?p.Fn(e):p.tslFn(e),Me=N(({a:e,b:t,t:o})=>{let r=o.sub(e),l=t.sub(e);return r.div(l).clamp()}),xe=N(({dotNL:e})=>{let o=n.float(1).sub(X),r=e.add(Y);return r=Me({a:o.negate(),b:o,t:r}),r=r.mul(1),r}),Se=N(({shading:e,lightColor:t})=>{let o=n.mix(k,n.diffuseColor,e);return t.mul(n.BRDF_Lambert({diffuseColor:o}))}),z=class extends n.LightingModel{constructor(){super()}direct({lightDirection:e,lightColor:t,reflectedLight:o}){let r=n.transformedNormalView.dot(e).clamp(-1,1),l=xe({dotNL:r});o.directDiffuse.assign(o.directDiffuse.add(Se({shading:l,lightColor:t}))),o.directSpecular.assign(o.directSpecular.add(x.add(M).mul(H).mul(n.mix(n.vec3(0),n.BRDF_Lambert({diffuseColor:t}),g))))}indirect(e){this.indirectDiffuse(e),this.indirectSpecular(e)}indirectDiffuse({irradiance:e,reflectedLight:t}){t.indirectDiffuse.assign(t.indirectDiffuse.add(e.mul(n.BRDF_Lambert({diffuseColor:n.diffuseColor}))))}indirectSpecular({reflectedLight:e}){e.indirectSpecular.assign(e.indirectSpecular.add(x.add(M).mul(H).mul(n.mix(n.vec3(1),n.vec3(0),g))))}},f={None:"none",WorldCoordinates:"worldCoordinates",ScreenCoordinates:"screenCoordinates"},Fe=N(({parametricRimLift:e,parametricRimFresnelPower:t,parametricRimColor:o})=>{let r=E.modelViewPosition.normalize(),l=E.transformedNormalView.dot(r.negate());return E.float(1).sub(l).add(e).clamp().pow(t).mul(o)}),ye=class extends i.NodeMaterial{customProgramCacheKey(){let e=super.customProgramCacheKey();return e+=`isOutline:${this.isOutline},`,e}get isMToonNodeMaterial(){return!0}constructor(e={}){super(),e.transparentWithZWrite&&(e.depthWrite=!0),delete e.transparentWithZWrite,delete e.giEqualizationFactor,delete e.v0CompatShade,delete e.debugMode,this.emissiveNode=null,this.lights=!0,this.color=new i.Color(1,1,1),this.map=null,this.emissive=new i.Color(0,0,0),this.emissiveIntensity=1,this.emissiveMap=null,this.normalMap=null,this.normalScale=new i.Vector2(1,1),this.shadeColorFactor=new i.Color(0,0,0),this.shadeMultiplyTexture=null,this.shadingShiftFactor=0,this.shadingShiftTexture=null,this.shadingShiftTextureScale=1,this.shadingToonyFactor=.9,this.rimLightingMixFactor=1,this.rimMultiplyTexture=null,this.matcapFactor=new i.Color(1,1,1),this.matcapTexture=null,this.parametricRimColorFactor=new i.Color(0,0,0),this.parametricRimLiftFactor=0,this.parametricRimFresnelPowerFactor=5,this.outlineWidthMode=f.None,this.outlineWidthMultiplyTexture=null,this.outlineWidthFactor=0,this.outlineColorFactor=new i.Color(0,0,0),this.outlineLightingMixFactor=1,this.uvAnimationScrollXSpeedFactor=0,this.uvAnimationScrollYSpeedFactor=0,this.uvAnimationRotationSpeedFactor=0,this.uvAnimationMaskTexture=null,this.shadeColorNode=null,this.shadingShiftNode=null,this.shadingToonyNode=null,this.rimLightingMixNode=null,this.rimMultiplyNode=null,this.matcapNode=null,this.parametricRimColorNode=null,this.parametricRimLiftNode=null,this.parametricRimFresnelPowerNode=null,this.uvAnimationScrollXOffset=0,this.uvAnimationScrollYOffset=0,this.uvAnimationRotationPhase=0,this.isOutline=!1,this._animatedUVNode=null,this.setValues(e)}setupLightingModel(){return new z}setup(e){var t;this._animatedUVNode=new D((t=this.uvAnimationMaskTexture&&this.uvAnimationMaskTexture.isTexture===!0)!=null?t:!1),super.setup(e)}setupDiffuseColor(e){let t=null;if(this.colorNode==null){if(t=J,this.map&&this.map.isTexture===!0){let o=Q.context({getUV:()=>this._animatedUVNode});t=t.mul(o)}this.colorNode=t}this.vertexColors===!0&&e.geometry.hasAttribute("color")&&(console.warn("MToonNodeMaterial: MToon ignores vertex colors. Consider using a model without vertex colors instead."),this.vertexColors=!1),super.setupDiffuseColor(e),parseInt(i.REVISION,10)<166&&this.transparent===!1&&this.blending===i.NormalBlending&&this.alphaToCoverage===!1&&i.diffuseColor.a.assign(1),this.colorNode===t&&(this.colorNode=null)}setupVariants(){k.assign(this._setupShadeColorNode()),Y.assign(this._setupShadingShiftNode()),X.assign(this._setupShadingToonyNode()),g.assign(this._setupRimLightingMixNode()),H.assign(this._setupRimMultiplyNode()),M.assign(this._setupMatcapNode()),x.assign(this._setupParametricRimNode())}setupNormal(e){let t=this.normalNode;if(this.normalNode==null){if(this.normalNode=i.materialNormal,this.normalMap&&this.normalMap.isTexture===!0){let r=ee.context({getUV:()=>this._animatedUVNode});this.normalNode=i.normalMap(r,te)}this.isOutline&&(this.normalNode=this.normalNode.negate())}if(parseInt(i.REVISION,10)>=168){let r=this.normalNode;return this.normalNode=t,r}else{super.setupNormal(e),this.normalNode=t;return}}setupLighting(e){let t=null;if(this.emissiveNode==null){if(t=ie.mul(oe),this.emissiveMap&&this.emissiveMap.isTexture===!0){let r=re.context({getUV:()=>this._animatedUVNode});t=t.mul(r)}this.emissiveNode=t}let o=super.setupLighting(e);return this.emissiveNode===t&&(this.emissiveNode=null),o}setupOutput(e,t){return this.isOutline&&this.outlineWidthMode!==f.None&&(t=i.vec4(i.mix(I,t.xyz.mul(I),Te),t.w)),super.setupOutput(e,t)}setupPosition(e){var t,o;let r=this.positionNode;if(this.isOutline&&this.outlineWidthMode!==f.None){(t=this.positionNode)!=null||(this.positionNode=i.positionLocal);let u=i.normalLocal.normalize(),d=fe;if(this.outlineWidthMultiplyTexture&&this.outlineWidthMultiplyTexture.isTexture===!0){let c=Re.context({getUV:()=>this._animatedUVNode});d=d.mul(c)}let T=i.length(i.modelNormalMatrix.mul(u)),R=d.mul(T).mul(u);if(this.outlineWidthMode===f.WorldCoordinates)this.positionNode=this.positionNode.add(R);else if(this.outlineWidthMode===f.ScreenCoordinates){let c=i.cameraProjectionMatrix.element(1).element(1);this.positionNode=this.positionNode.add(R.div(c).mul(i.positionView.z.negate()))}(o=this.positionNode)!=null||(this.positionNode=i.positionLocal)}let l=super.setupPosition(e);return l.z.add(l.w.mul(1e-6)),this.positionNode=r,l}copy(e){var t,o,r,l,u,d,T,R,c,S,F,y,C,_,L,w,V,P,A;return this.color.copy(e.color),this.map=(t=e.map)!=null?t:null,this.emissive.copy(e.emissive),this.emissiveIntensity=e.emissiveIntensity,this.emissiveMap=(o=e.emissiveMap)!=null?o:null,this.normalMap=(r=e.normalMap)!=null?r:null,this.normalScale.copy(e.normalScale),this.shadeColorFactor.copy(e.shadeColorFactor),this.shadeMultiplyTexture=(l=e.shadeMultiplyTexture)!=null?l:null,this.shadingShiftFactor=e.shadingShiftFactor,this.shadingShiftTexture=(u=e.shadingShiftTexture)!=null?u:null,this.shadingShiftTextureScale=e.shadingShiftTextureScale,this.shadingToonyFactor=e.shadingToonyFactor,this.rimLightingMixFactor=e.rimLightingMixFactor,this.rimMultiplyTexture=(d=e.rimMultiplyTexture)!=null?d:null,this.matcapFactor.copy(e.matcapFactor),this.matcapTexture=(T=e.matcapTexture)!=null?T:null,this.parametricRimColorFactor.copy(e.parametricRimColorFactor),this.parametricRimLiftFactor=e.parametricRimLiftFactor,this.parametricRimFresnelPowerFactor=e.parametricRimFresnelPowerFactor,this.outlineWidthMode=e.outlineWidthMode,this.outlineWidthMultiplyTexture=(R=e.outlineWidthMultiplyTexture)!=null?R:null,this.outlineWidthFactor=e.outlineWidthFactor,this.outlineColorFactor.copy(e.outlineColorFactor),this.outlineLightingMixFactor=e.outlineLightingMixFactor,this.uvAnimationScrollXSpeedFactor=e.uvAnimationScrollXSpeedFactor,this.uvAnimationScrollYSpeedFactor=e.uvAnimationScrollYSpeedFactor,this.uvAnimationRotationSpeedFactor=e.uvAnimationRotationSpeedFactor,this.uvAnimationMaskTexture=(c=e.uvAnimationMaskTexture)!=null?c:null,this.shadeColorNode=(S=e.shadeColorNode)!=null?S:null,this.shadingShiftNode=(F=e.shadingShiftNode)!=null?F:null,this.shadingToonyNode=(y=e.shadingToonyNode)!=null?y:null,this.rimLightingMixNode=(C=e.rimLightingMixNode)!=null?C:null,this.rimMultiplyNode=(_=e.rimMultiplyNode)!=null?_:null,this.matcapNode=(L=e.matcapNode)!=null?L:null,this.parametricRimColorNode=(w=e.parametricRimColorNode)!=null?w:null,this.parametricRimLiftNode=(V=e.parametricRimLiftNode)!=null?V:null,this.parametricRimFresnelPowerNode=(P=e.parametricRimFresnelPowerNode)!=null?P:null,this.isOutline=(A=e.isOutline)!=null?A:null,super.copy(e)}update(e){this.uvAnimationScrollXOffset+=e*this.uvAnimationScrollXSpeedFactor,this.uvAnimationScrollYOffset+=e*this.uvAnimationScrollYSpeedFactor,this.uvAnimationRotationPhase+=e*this.uvAnimationRotationSpeedFactor}_setupShadeColorNode(){if(this.shadeColorNode!=null)return i.vec3(this.shadeColorNode);let e=ae;if(this.shadeMultiplyTexture&&this.shadeMultiplyTexture.isTexture===!0){let t=U.context({getUV:()=>this._animatedUVNode});e=e.mul(t)}return e}_setupShadingShiftNode(){if(this.shadingShiftNode!=null)return i.float(this.shadingShiftNode);let e=le;if(this.shadingShiftTexture&&this.shadingShiftTexture.isTexture===!0){let t=U.context({getUV:()=>this._animatedUVNode});e=e.add(t.mul(ne))}return e}_setupShadingToonyNode(){return this.shadingToonyNode!=null?i.float(this.shadingToonyNode):se}_setupRimLightingMixNode(){return this.rimLightingMixNode!=null?i.float(this.rimLightingMixNode):me}_setupRimMultiplyNode(){return this.rimMultiplyNode!=null?i.vec3(this.rimMultiplyNode):this.rimMultiplyTexture&&this.rimMultiplyTexture.isTexture===!0?ue.context({getUV:()=>this._animatedUVNode}):i.vec3(1)}_setupMatcapNode(){return this.matcapNode!=null?i.vec3(this.matcapNode):this.matcapTexture&&this.matcapTexture.isTexture===!0?de.context({getUV:()=>i.matcapUV.mul(1,-1).add(0,1)}).mul(he):i.vec3(0)}_setupParametricRimNode(){let e=this.parametricRimColorNode!=null?i.vec3(this.parametricRimColorNode):ce,t=this.parametricRimLiftNode!=null?i.float(this.parametricRimLiftNode):pe,o=this.parametricRimFresnelPowerNode!=null?i.float(this.parametricRimFresnelPowerNode):Ee;return Fe({parametricRimLift:t,parametricRimFresnelPower:o,parametricRimColor:e})}};
/*!
 * @pixiv/three-vrm-materials-mtoon v3.1.4
 * MToon (toon material) module for @pixiv/three-vrm
 *
 * Copyright (c) 2019-2024 pixiv Inc.
 * @pixiv/three-vrm-materials-mtoon is distributed under MIT License
 * https://github.com/pixiv/three-vrm/blob/release/LICENSE
 */
